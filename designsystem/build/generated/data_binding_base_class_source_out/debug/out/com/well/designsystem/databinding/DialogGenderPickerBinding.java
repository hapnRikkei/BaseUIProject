// Generated by view binder compiler. Do not edit!
package com.well.designsystem.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.well.designsystem.R;
import com.well.designsystem.view.bottomsheet.WellBottomSheetHeader;
import com.well.designsystem.view.item.WellListItem;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogGenderPickerBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final WellListItem itemGenderFemale;

  @NonNull
  public final WellListItem itemGenderMale;

  @NonNull
  public final WellListItem itemGenderOthers;

  @NonNull
  public final WellBottomSheetHeader viewHeader;

  private DialogGenderPickerBinding(@NonNull RelativeLayout rootView,
      @NonNull WellListItem itemGenderFemale, @NonNull WellListItem itemGenderMale,
      @NonNull WellListItem itemGenderOthers, @NonNull WellBottomSheetHeader viewHeader) {
    this.rootView = rootView;
    this.itemGenderFemale = itemGenderFemale;
    this.itemGenderMale = itemGenderMale;
    this.itemGenderOthers = itemGenderOthers;
    this.viewHeader = viewHeader;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogGenderPickerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogGenderPickerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_gender_picker, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogGenderPickerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.itemGenderFemale;
      WellListItem itemGenderFemale = ViewBindings.findChildViewById(rootView, id);
      if (itemGenderFemale == null) {
        break missingId;
      }

      id = R.id.itemGenderMale;
      WellListItem itemGenderMale = ViewBindings.findChildViewById(rootView, id);
      if (itemGenderMale == null) {
        break missingId;
      }

      id = R.id.itemGenderOthers;
      WellListItem itemGenderOthers = ViewBindings.findChildViewById(rootView, id);
      if (itemGenderOthers == null) {
        break missingId;
      }

      id = R.id.viewHeader;
      WellBottomSheetHeader viewHeader = ViewBindings.findChildViewById(rootView, id);
      if (viewHeader == null) {
        break missingId;
      }

      return new DialogGenderPickerBinding((RelativeLayout) rootView, itemGenderFemale,
          itemGenderMale, itemGenderOthers, viewHeader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
